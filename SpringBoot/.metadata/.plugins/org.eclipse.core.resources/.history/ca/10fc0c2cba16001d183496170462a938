package com.test.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

import com.test.repository.IMemberDAO;
import com.test.repository.TestDAO;

//어노테이션 방식으로 만든 컨트롤러
//- @Controller > @Component > @Bean > 스프링이 생성하고 관리하는 객체
//- 위의 어노티에션이 동작하려면 지정된 공간(패키지) 내에 있어야 한다.
//- 스캔 기본 페이지 > 메인 클래스가 포함된 패키지 > com.test.spring
/*
@Controller
public class DIController {
	
	@GetMapping("/test")
	public String test() {
		return "test";
	}
	
}
*/


//의존 주입 방법
//1. 생성자 
//2. Setter
//3. 필드 주입

//의존 주입 1.
//- 가장 정석
//- 생성자 주입
//- @Autowired 사용x
//- 생성자가 유일해야 한다.

@Controller
public class DIController {
	
	private final TestDAO dao;
	
	public DIController(TestDAO dao) {
		this.dao = dao;
	}
	
	@GetMapping("/test")
	public String test() {
		return "test";
	}
}


//의존 주입2
//- 생성자 주입
//- 생성자가 여러개라면?
/*
@Controller
public class DIController {
	
	private TestDAO dao;
	
	public
	
	@Autowired
	public DIController(TestDAO dao) {
		this.dao = dao;
	}
	
	@GetMapping("/test")
	public String test() {
		return "test";
	}
	
}
*/


//의존 주입 3.
//- 의존 객체가 클래스가 아니라 인터페이스 구현 객체일 때
//- 인터페이스 변수에 의존 객체 삽입 > (내부) > 스프링에 해당 인터페이스의 객체(클래스)를 찾아서 객체화한다.
//- 가장 흔한 방식
/*
@Controller
public class DIController {
	
	private IMemberDAO dao;
	
	public DIController(IMemberDAO dao) {
		this.dao = dao;
	}
	
	@GetMapping("/test")
	public String test() {
		System.out.println(dao.test());
		System.out.println();
		
		return "test";
	}
}
 */

//의존 주입 4.
//- Setter 주입
//- @Autowired가 반드시 필요하다.
//- 여러 Setter 중 의존 주입에 사용할 Setter을 지정한다.
/*
@Controller
public class DIController {
	
	private IMemberDAO dao;
	
	@Autowired
	public void setDao(IMemberDAO dao) {
		this.dao = dao;
	}
	
	@GetMapping("/test")
	public String test() {
		System.out.println(dao.test());
		System.out.println();
		
		return "test";
	}
}
*/

